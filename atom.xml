<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Try your best</title>
  
  
  <link href="http://43.143.165.129/atom.xml" rel="self"/>
  
  <link href="http://43.143.165.129/"/>
  <updated>2022-12-27T08:34:46.805Z</updated>
  <id>http://43.143.165.129/</id>
  
  <author>
    <name>John Son</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客部署于私有云服务器端</title>
    <link href="http://43.143.165.129/2022/12/24/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    <id>http://43.143.165.129/2022/12/24/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/</id>
    <published>2022-12-24T13:33:13.000Z</published>
    <updated>2022-12-27T08:34:46.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客部署于私有云服务器端"><a href="#hexo博客部署于私有云服务器端" class="headerlink" title="hexo博客部署于私有云服务器端"></a>hexo博客部署于私有云服务器端</h1><h2 id="服务远程登录安装必要组件"><a href="#服务远程登录安装必要组件" class="headerlink" title="服务远程登录安装必要组件"></a>服务远程登录安装必要组件</h2><p>服务器安装 Git 和 Nginx</p><p>Nginx部署便就可以通过公网ip来在异地浏览器中访问云服务器中部署的网站</p><p>Git通过此组件把本地部署的博客推送到远端云服务器中</p><p>首先，通过终端登录云服务器分别执行一下两个命令，完成Git与Nginx的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install git nginx -y</span><br></pre></td></tr></table></figure><h2 id="服务器创建Git仓库"><a href="#服务器创建Git仓库" class="headerlink" title="服务器创建Git仓库"></a>服务器创建Git仓库</h2><p>服务器与本地的原理一样也需要创建一个Git仓库，用于部署网站，以下有四步分别为：</p><p>该路径是Git仓库的路径:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo/</span><br></pre></td></tr></table></figure><p>仓库权限修改权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R $USER:$USER /var/repo/</span><br><span class="line">chmod -R 755 /var/repo/</span><br></pre></td></tr></table></figure><p>创建远程git仓库，这里我自己选择仓库名叫myblog（名称可随意）与本地创建Git仓库同理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo</span><br><span class="line">git init --bare myblog.git</span><br></pre></td></tr></table></figure><p>此时就可以看到刚才初始化创建的git仓库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /var/repo</span><br></pre></td></tr></table></figure><h2 id="服务器配置Nginx"><a href="#服务器配置Nginx" class="headerlink" title="服务器配置Nginx"></a>服务器配置Nginx</h2><p>创建目录并修改目录所有权和权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/hexo</span><br><span class="line">chown -R $USER:$USER /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p>修改 Nginx 的 default 文件，让其 root 指向刚刚创建的 /var/www/hexo目录:(nginx.conf)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>修改为root /var/www/hexo</p><p>server_name 公网IP</p><p>然后重启 Nginx 服务:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="配置钩子文件（hooks）"><a href="#配置钩子文件（hooks）" class="headerlink" title="配置钩子文件（hooks）"></a>配置钩子文件（hooks）</h2><p>执行以下命令，新建钩子文件，其中 myblog.git 文件是上文创建的git仓库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/myblog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>post-receive该文件是通过vim创建的一个空白文件，只需要添加以下内容，退出保存即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/myblog.git checkout -f</span><br></pre></td></tr></table></figure><p>同样该文件也需要添加可执行权限，输入以下指令即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/repo/myblog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h2 id="部署本地-Hexo-到远程服务器"><a href="#部署本地-Hexo-到远程服务器" class="headerlink" title="部署本地 Hexo 到远程服务器"></a>部署本地 Hexo 到远程服务器</h2><p>将服务器地址添加到受信任的站点，在本地PC的任意目录从服务器上把仓库克隆下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone root@&#123;云服务器IP&#125;:/var/repo/myblog.git</span><br></pre></td></tr></table></figure><p>这里需要注意一下哈，{云服务器IP}这里只需要输入自己的云服务器的外网登录IP地址。通过git把远程仓库部署到PC机（windows10）的本地。</p><p>如果自己已经在本地搭建好博客那么这一步可以直接跳过不需要执行。<br>因为我们最终的目的是把本地的博客部署在自己的云服务器中，以提高自己博客的访问速度。直接修改站点配置文件，通过Git推送到自己的云服务器即可。那么废话结束，最后的一步，本地推送。</p><h2 id="本地博客远程推送"><a href="#本地博客远程推送" class="headerlink" title="本地博客远程推送"></a>本地博客远程推送</h2><p>修改配置文件</p><p>修改配置文件 _config.yml，将 url 改成 https://{云服务器IP}/</p><p>将 deploy 目标改为 {服务器用户名}@{服务IP}:/var/repo/myblog.git</p><p>delploy站点配置这里可以添加多个远端仓库，具体添加的格式可以参考一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-type:git  </span><br><span class="line">-repo:  </span><br><span class="line">    &#123;远端推送仓库地址&#125;  </span><br><span class="line">-branch:&#123;远端仓库分支&#125;</span><br></pre></td></tr></table></figure><h2 id="本地博客推送"><a href="#本地博客推送" class="headerlink" title="本地博客推送"></a>本地博客推送</h2><p>此时只需要在自己的博客主目录打开gitbase输入npx hexo clean &amp;&amp;npx hexo g &amp;&amp; hexo d 完成推送即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博客部署于私有云服务器端&quot;&gt;&lt;a href=&quot;#hexo博客部署于私有云服务器端&quot; class=&quot;headerlink&quot; title=&quot;hexo博客部署于私有云服务器端&quot;&gt;&lt;/a&gt;hexo博客部署于私有云服务器端&lt;/h1&gt;&lt;h2 id=&quot;服务远程登录安装必</summary>
      
    
    
    
    
    <category term="Technology" scheme="http://43.143.165.129/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Markdown初识</title>
    <link href="http://43.143.165.129/2022/12/24/Markdown%E5%88%9D%E8%AF%86/"/>
    <id>http://43.143.165.129/2022/12/24/Markdown%E5%88%9D%E8%AF%86/</id>
    <published>2022-12-24T05:55:33.000Z</published>
    <updated>2022-12-27T08:34:50.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写文章（基于Markdown）"><a href="#编写文章（基于Markdown）" class="headerlink" title="编写文章（基于Markdown）"></a>编写文章（基于Markdown）</h1><h2 id="1-Markdown简介"><a href="#1-Markdown简介" class="headerlink" title="1.Markdown简介"></a>1.Markdown简介</h2><p>但是在我们正式写下我们文章的第一个文字时，我们需要了解一下什么是 Markdown：</p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式</p><p>基于Markdown的简洁性，它已经成为了目前世界上最流行的用于书写博客的语言。</p><h2 id="2-Markdown语法"><a href="#2-Markdown语法" class="headerlink" title="2.Markdown语法"></a>2.Markdown语法</h2><p>在了解Markdown 语法之前，博主十分强烈推荐csdn编辑器markdown,十分方便好用，还可以实时预览。</p><h2 id="（1）标题"><a href="#（1）标题" class="headerlink" title="（1）标题"></a>（1）标题</h2><p>Markdown 语法：</p><h1 id="1-一级标题"><a href="#1-一级标题" class="headerlink" title="1.# 一级标题"></a>1.# 一级标题</h1><hr><h2 id="2-二级标题"><a href="#2-二级标题" class="headerlink" title="2.## 二级标题"></a>2.## 二级标题</h2><hr><h3 id="3-三级标题"><a href="#3-三级标题" class="headerlink" title="3.### 三级标题"></a>3.### 三级标题</h3><hr><h4 id="4-四级标题"><a href="#4-四级标题" class="headerlink" title="4.#### 四级标题"></a>4.#### 四级标题</h4><hr><h5 id="5-五级标题"><a href="#5-五级标题" class="headerlink" title="5. ##### 五级标题"></a>5. ##### 五级标题</h5><hr><h6 id="6-六级标题"><a href="#6-六级标题" class="headerlink" title="6. ###### 六级标题"></a>6. ###### 六级标题</h6><hr><h2 id="（2）粗体、斜体、删除线和下划线"><a href="#（2）粗体、斜体、删除线和下划线" class="headerlink" title="（2）粗体、斜体、删除线和下划线"></a>（2）粗体、斜体、删除线和下划线</h2><p>Markdown语法：</p><p><em>1. 斜体</em><br><em>斜体</em></p><p><strong>2.粗体</strong></p><p><strong>粗体</strong></p><p><em><strong>3.加粗斜体</strong></em></p><p>*** 加粗斜体 ***</p><p><del>4.删除线</del></p><p>~~ 删除线 ~~</p><p>Typora快捷键</p><p>ctrl+b: 粗体</p><p>##（3）引用快<br>Markdown 语法：</p><p>‘&gt;’文字引用</p><p>Typora快捷键： ctrl+shift +q</p><p>##（4）代码块<br>Markdown语法：</p><p>``1.行内代码</p><p>``行内代码</p><p>···2.···</p><p>···</p><p>3.多行代码</p><p>4.多行代码</p><p>5.```</p><p>##（5）代码块<br>Markdown语法：</p><p>$$<br>math<br>$$</p><p>##（6）分割线<br>Markdown语法：</p><p>1.方法一：—</p><p>2.方法二：+++</p><p>3.方法三：***</p><p>使用以上三种方法都可以</p><p>##（7）列表<br>Markdown语法：</p><p>1 有序列表项</p><p>*无序列表项</p><p>+无序列表项</p><p>##（8）表格<br>Markdown语法：</p><p>表头1|表头2</p><p>-|-|-</p><p>内容11|内容12</p><p>内容21|内容22</p><p>##（9）超链接<br>Markdown语法：</p><p>``方法一：【链接文字】（链接地址“链接描述”）</p><p>``例如：【我的博客】（<a href="https://johnson.github.io/">https://johnson.github.io/</a> “我的博客”）</p><p>``方法二：《链接地址》</p><p>``例如：《<a href="https://johnson.github.io》/">https://johnson.github.io》</a></p><h2 id="（10）超链接"><a href="#（10）超链接" class="headerlink" title="（10）超链接"></a>（10）超链接</h2><p>Markdown语法：</p><p>``1 ![图片]（图片地址 “图片描述”）</p><p>``2 例如：！【示例图片】（<a href="https://www.example.com/example.PNG">https://www.example.com/example.PNG</a> “示例图片”）</p><p>说明：在Hexo中插入图片时，请按照以下步骤进行设置<br>（1）将站点配置文件中的 post_asset_folde选项设置成 true<br>（2）在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save安装插件<br>（3）此时使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将待添加的图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可<br>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加了图片 example.PNG，则可以在对应的文章中使用语句<img src="title/example.PNG" alt="示例图片" title="示例图片"> 添加图片</p><p>好了，常用的 Markdown 语法至此我们已经基本学习完毕了,然后我们就可以根据这些语法去书写我们的博客内容啦,下面再提供几个比较</p><p>高级的玩法：</p><p>(1）模板设置<br>当我们使用命令hexo new “title” 去创建我们的文章时，Hexo 会根据 /scaffolds/post.md 文件对新建文件进行初始化，换言之，/scaffolds/post.md 文件就是创建新文章的模板，所以我们可以修改它来适应自己的写作习惯，一个简单的示例如下：</p><pre><code>  1|title:&#123;&#123; title &#125;&#125;    2|date: &#123;&#123; date &#125;&#125;                3|tags:                   4|categories:                   5|</code></pre><p>(2）头部设置<br>在每一篇博客文章的开头都会有对文章的说明文字，叫做 文章头部，文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以对文章添加标签、分类等，一个简单的示例如下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;编写文章（基于Markdown）&quot;&gt;&lt;a href=&quot;#编写文章（基于Markdown）&quot; class=&quot;headerlink&quot; title=&quot;编写文章（基于Markdown）&quot;&gt;&lt;/a&gt;编写文章（基于Markdown）&lt;/h1&gt;&lt;h2 id=&quot;1-Markdow</summary>
      
    
    
    
    
    <category term="Technology" scheme="http://43.143.165.129/tags/Technology/"/>
    
  </entry>
  
</feed>
